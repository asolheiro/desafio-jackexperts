name: Desafio JackExperts - Pipeline

on: 
  push:
    branches:
      - main

jobs:
  build:
    name: Build Docker image
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:27.3.1-dind
        options: --privileged
    env:
      TAG: ${{ github.sha }}
      IMAGE: asolheiro/desafio-jackexperts:${{ github.sha }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and export
        uses: docker/build-push-action@v6
        with:
          tags: asolheiro/desafio-jackexperts:${{ github.sha }}
          outputs: type=docker, dest=/tmp/desafio-jackexperts.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: desafio-jackexperts.tar
          path: /tmp/desafio-jackexperts.tar

  test:
    name: Run Trivy Security scan
    runs-on: ubuntu-latest
    needs: build
    services:
      docker:
        image: docker:27.3.1-dind
        options: --privileged
    env:
      IMAGE: asolheiro/desafio-jackexperts:${{ github.sha }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Dowload artifact
        uses: actions/download-artifact@v4
        with:
          name: desafio-jackexperts.tar
          path: /tmp
        
      - name: Load Docker image
        run: |
          docker load --input /tmp/desafio-jackexperts.tar
          docker image ls -a

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ${{ env.IMAGE }}
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  push:
    name: Push Docker Image      
    runs-on: ubuntu-latest
    needs: test
    services:
      docker:
        image: docker:27.3.1-dind
        options: --privileged
    steps: 
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Dowload artifact
        uses: actions/download-artifact@v4
        with:
          name: desafio-jackexperts.tar

      - name: Load Docker Image
        run: docker load -i desafio-jackexperts.tar

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        
      - name: Push to DockerHub
        run: docker image push asolheiro/desafio-jackexperts:${{ github.sha }}

  update:
    name: Update Helm Chart
    runs-on: ubuntu-latest
    needs: push
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Clone Helm repository
        run: git clone https://${{ secrets.user_github }}:${{ secrets.GITHUB_TOKEN }}@github.com/rmndvngrpslhr/desafio-jackexperts.git

      - name: Update Helm values
        run: |
          cd desafio-jackexperts/helm
          yq e -i ".image.tag = \"${{ github.sha }}\"" ./values.yaml
          git config user.email "avgsolheiro@gmail.com"
          git config user.name ${{ secrets.user_github }}
          git add .
          git commit -m "Update image tag to ${{ github.sha }}"
          git push https://${{ secrets.user_github }}:${{ secrets.GITHUB_TOKEN }}@github.com/rmndvngrpslhr/desafio-jackexperts.git

  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: update
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install helm
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh

      - name: Set up Kubeconfig
        run: |
          mkdir -P ~/.minikube
          Echo "$MINIKUBE_CLIENT_CRT" | base64 --decode > ~/.minikube/client.crt
          echo "$MINIKUBE_CLIENT_KEY" | base64 --decode > ~/.minikube/client.key
          echo "$MINIKUBE_CA_CRT" | base64 --decode > ~/.minikube/ca.crt

          mkdir -p ~/.kube
          echo "$KUBECONFIG_BASE64" | base64 --decode > ~/.kube/config

          sed -i 's|/home/ubuntu/.minikube|/home/runner/.minikube|g' ~/.kube/config
        env:
          KUBECONFIG_BASE64: ${{ secrets.KUBECONFIG_BASE64 }}
          MINIKUBE_CLIENT_CRT: ${{ secrets.MINIKUBE_CLIENT_CRT }}
          MINIKUBE_CLIENT_KEY: ${{ secrets.MINIKUBE_CLIENT_KEY }}
          MINIKUBE_CA_CRT: ${{ secrets.MINIKUBE_CA_CRT }}

      - name: Verify kubectl access
        run: kubectl get nodes

      - name: Handle chart
        run: |
          git clone https://${{ secrets.user_github }}:${{ secrets.GITHUB_TOKEN }}@github.com/rmndvngrpslhr/desafio-jackexperts.git
          ls -lha
          cd ./helm
          helm upgrade -i desafio-jackexperts -f values.yaml -n nginx-desafio .
